import { app, BrowserWindow, screen } from "electron";
import { autoUpdater } from 'electron-updater'
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

import { axiosIpcMain } from "./ipcBridge/main/axios";
import Store from "electron-store";
import { settingsIpcMain } from "./ipcBridge/main/settings";
import { db } from "./database/electron";
import { othersIpcMain } from "./ipcBridge/main/others";
import { windowIpcMain } from "./ipcBridge/main/window";

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  app.quit();
}

const createBridage = (window: BrowserWindow) => {
  // electron-store
  Store.initRenderer();

  // ipcMain
  axiosIpcMain(window);
  settingsIpcMain();
  windowIpcMain(window);
  othersIpcMain(window);

  // database
  db.init(window);
};

const createWindow = (): BrowserWindow => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    minHeight: 650,
    minWidth: 700,
    height: Math.round(screen.getPrimaryDisplay().workAreaSize.height * 0.95),
    width: Math.round(screen.getPrimaryDisplay().workAreaSize.width * 0.95),
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      spellcheck: false,
    },
    titleBarStyle: "hiddenInset",
    backgroundColor: "#000",
    center: true,
  });

  // only work on windows
  mainWindow.setMenuBarVisibility(false);

  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  return mainWindow;
  // Open the DevTools.
  // mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", () => {
  const window = createWindow();
  createBridage(window);

  // autoUpdater
  autoUpdater.checkForUpdatesAndNotify();

  // Quit when all windows are closed, except on macOS. There, it's common
  // for applications and their menu bar to stay active until the user quits
  // explicitly with Cmd + Q.
  app.on("window-all-closed", () => {
    // if (process.platform !== "darwin") {
    app.quit();
    // }
  });

  app.on("activate", () => {
    // On OS X it's common to re-create a window in the app when the
    // dock icon is clicked and there are no other windows open.
    if (BrowserWindow.getAllWindows().length === 0) {
      createWindow();
      // app.show();
    }
  });
})

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
